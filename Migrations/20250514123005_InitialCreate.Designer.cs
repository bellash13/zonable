// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using zonable.Data;

#nullable disable

namespace zonable.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20250514123005_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.16");

            modelBuilder.Entity("zonable.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CreatedAt = new DateTime(2025, 5, 14, 12, 30, 2, 958, DateTimeKind.Utc).AddTicks(9873),
                            Name = "John Doe"
                        },
                        new
                        {
                            CustomerId = 2,
                            CreatedAt = new DateTime(2025, 5, 14, 12, 30, 2, 958, DateTimeKind.Utc).AddTicks(9876),
                            Name = "Jane Smith"
                        });
                });

            modelBuilder.Entity("zonable.Models.Settings", b =>
                {
                    b.Property<string>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("default");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SettingId");

                    b.ToTable("Settings", (string)null);

                    b.HasData(
                        new
                        {
                            SettingId = "utc",
                            TimeZone = "UTC"
                        },
                        new
                        {
                            SettingId = "local",
                            TimeZone = "W. Central Africa Standard Time"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
